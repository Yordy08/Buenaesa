{"file":"_id_.vue.mjs","mappings":";;;;;;;;AA6BE,UAAM,UAAU,IAAI,IAAI;AACxB,UAAM,UAAU,IAAI,IAAI;AACxB,UAAM,QAAQ,IAAI,IAAI;AACtB,UAAM,QAAQ;AACI,UAAM,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../../pages/Notis/[id].vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <section class=\"noticia-detalle\">\r\n        <div class=\"max-width\">\r\n          <br>\r\n    \r\n          \r\n          <!-- Mostrar un mensaje de carga mientras se obtiene la noticia -->\r\n          <div v-if=\"loading\" class=\"loading\">Cargando...</div>\r\n          \r\n          <!-- Mostrar un mensaje cuando no hay noticia disponible -->\r\n          <div v-else-if=\"error\" class=\"error\">{{ error }}</div>\r\n          \r\n          <!-- Mostrar la noticia si está disponible -->\r\n          <div v-else>\r\n            <h3>{{ noticia.titulo }}</h3>\r\n            <p>{{ noticia.descripcion }}</p>\r\n            <img v-if=\"noticia.archivo\" :src=\"noticia.archivo\" alt=\"Imagen de la noticia\" />\r\n           \r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, onMounted } from 'vue';\r\n  import { useRoute } from 'vue-router';\r\n  \r\n  const noticia = ref(null);\r\n  const loading = ref(true);\r\n  const error = ref(null);\r\n  const route = useRoute();\r\n  const noticiaId = route.params.id; // Capturamos el parámetro 'id' de la URL\r\n  \r\n  // Función para obtener los detalles de la noticia desde la API\r\n  const fetchNoticia = async () => {\r\n    console.log('Iniciando la carga de la noticia con id:', noticiaId); // Log para depuración\r\n    \r\n    try {\r\n      const response = await fetch(`http://localhost:3001/api/noticias/${noticiaId}`, {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        console.error('Error en la respuesta:', response.statusText); // Log del error\r\n        throw new Error('Error al obtener noticia: ' + response.statusText);\r\n      }\r\n  \r\n      const data = await response.json();\r\n      console.log('Respuesta de la API:', data); // Log de la respuesta de la API\r\n  \r\n      if (data && data.noticia) {\r\n        noticia.value = data.noticia;\r\n        console.log('Noticia encontrada:', noticia.value); // Log de la noticia\r\n      } else {\r\n        error.value = 'Noticia no encontrada.';\r\n        console.log('No se encontró la noticia para el id:', noticiaId); // Log si no se encuentra la noticia\r\n      }\r\n    } catch (err) {\r\n      console.error('Error al obtener la noticia:', err); // Log del error\r\n      error.value = 'Error al cargar la noticia. Inténtalo más tarde.';\r\n    } finally {\r\n      loading.value = false; // Ocultamos el mensaje de carga\r\n      console.log('Carga de noticia completada, estado de carga:', loading.value); // Log de finalización\r\n    }\r\n  };\r\n  \r\n  // Cargar los detalles de la noticia cuando se monta el componente\r\n  onMounted(() => {\r\n    console.log('Componente montado, cargando la noticia'); // Log cuando el componente se monta\r\n    fetchNoticia();\r\n  });\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Estilos para la sección de detalles */\r\n  .noticia-detalle {\r\n    padding: 20px;\r\n    max-width: 80%;\r\n    margin: 20px auto;\r\n    background-color: #ffffff;\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n    border-radius: 8px;\r\n  }\r\n  \r\n  .loading,\r\n  .error {\r\n    text-align: center;\r\n    color: #999;\r\n    font-size: 1.1em;\r\n  }\r\n  \r\n  .noticia-detalle h3 {\r\n    font-size: 1.5em;\r\n    margin-bottom: 10px;\r\n  }\r\n  \r\n  .noticia-detalle p {\r\n    color: #666;\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  .noticia-detalle img {\r\n    max-width: 100%;\r\n    height: auto;\r\n    border-radius: 8px;\r\n    margin-top: 15px;\r\n  }\r\n  \r\n  .error {\r\n    color: red;\r\n    font-weight: bold;\r\n  }\r\n  \r\n  @keyframes fadeIn {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n  </style>\r\n  "],"version":3}